{"ast":null,"code":"import _classCallCheck from \"/Users/lesleycheung/Desktop/phonebook2/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/lesleycheung/Desktop/phonebook2/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/lesleycheung/Desktop/phonebook2/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/lesleycheung/Desktop/phonebook2/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/lesleycheung/Desktop/phonebook2/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/lesleycheung/Desktop/phonebook2/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/lesleycheung/Desktop/phonebook2/src/components/Find.js\";\nimport React from \"react\";\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      list: [\"Go to the store\", \"Wash the dishes\", \"Learn some code\"]\n    };\n    _this.addItem = _this.addItem.bind(_assertThisInitialized(_this));\n    _this.removeItem = _this.removeItem.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"addItem\",\n    value: function addItem(e) {\n      // Prevent button click from submitting form\n      e.preventDefault(); // Create variables for our list, the item to add, and our form\n\n      var list = this.state.list;\n      var newItem = document.getElementById(\"addInput\");\n      var form = document.getElementById(\"addItemForm\"); // If our input has a value\n\n      if (newItem.value != \"\") {\n        // Add the new item to the end of our list array\n        list.push(newItem.value); // Then we use that to set the state for list\n\n        this.setState({\n          list: list\n        }); // Finally, we need to reset the form\n\n        newItem.classList.remove(\"is-danger\");\n        form.reset();\n      } else {\n        // If the input doesn't have a value, make the border red since it's required\n        newItem.classList.add(\"is-danger\");\n      }\n    }\n  }, {\n    key: \"removeItem\",\n    value: function removeItem(item) {\n      // Put our list into an array\n      var list = this.state.list.slice(); // Check to see if item passed in matches item in array\n\n      list.some(function (el, i) {\n        if (el === item) {\n          // If item matches, remove it from array\n          list.splice(i, 1);\n          return true;\n        }\n      }); // Set state to list\n\n      this.setState({\n        list: list\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(\"section\", {\n        className: \"section\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(List, {\n        items: this.state.list,\n        delete: this.removeItem,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      })), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }), React.createElement(\"section\", {\n        className: \"section\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        className: \"form\",\n        id: \"addItemForm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        className: \"input\",\n        id: \"addInput\",\n        placeholder: \"Something that needs ot be done...\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"button is-info\",\n        onClick: this.addItem,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, \"Add Item\")))));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nvar List =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(List, _React$Component2);\n\n  function List(props) {\n    var _this2;\n\n    _classCallCheck(this, List);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(List).call(this, props));\n    _this2.state = {\n      filtered: []\n    };\n    _this2.handleChange = _this2.handleChange.bind(_assertThisInitialized(_this2));\n    return _this2;\n  }\n\n  _createClass(List, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        filtered: this.props.items\n      });\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      this.setState({\n        filtered: nextProps.items\n      });\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(e) {\n      // Variable to hold the original version of the list\n      var currentList = []; // Variable to hold the filtered list before putting into state\n\n      var newList = []; // If the search bar isn't empty\n\n      if (e.target.value !== \"\") {\n        // Assign the original list to currentList\n        currentList = this.props.items; // Use .filter() to determine which items should be displayed\n        // based on the search terms\n\n        newList = currentList.filter(function (item) {\n          // change current item to lowercase\n          var lc = item.toLowerCase(); // change search term to lowercase\n\n          var filter = e.target.value.toLowerCase(); // check to see if the current list item includes the search term\n          // If it does, it will be added to newList. Using lowercase eliminates\n          // issues with capitalization in search terms and search content\n\n          return lc.includes(filter);\n        });\n      } else {\n        // If the search bar is empty, set newList to original task list\n        newList = this.props.items;\n      } // Set the filtered state based on what our rules added to newList\n\n\n      this.setState({\n        filtered: newList\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        className: \"input\",\n        onChange: this.handleChange,\n        placeholder: \"Search...\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, this.state.filtered.map(function (item) {\n        return React.createElement(\"li\", {\n          key: item,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 148\n          },\n          __self: this\n        }, item, \" \\xA0\", React.createElement(\"span\", {\n          className: \"delete\",\n          onClick: function onClick() {\n            return _this3.props.delete(item);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150\n          },\n          __self: this\n        }));\n      })));\n    }\n  }]);\n\n  return List;\n}(React.Component);\n\nexport default List;","map":{"version":3,"sources":["/Users/lesleycheung/Desktop/phonebook2/src/components/Find.js"],"names":["React","App","props","state","list","addItem","bind","removeItem","e","preventDefault","newItem","document","getElementById","form","value","push","setState","classList","remove","reset","add","item","slice","some","el","i","splice","Component","List","filtered","handleChange","items","nextProps","currentList","newList","target","filter","lc","toLowerCase","includes","map","delete"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      list: [\"Go to the store\", \"Wash the dishes\", \"Learn some code\"]\n    };\n    this.addItem = this.addItem.bind(this);\n    this.removeItem = this.removeItem.bind(this);\n  }\n\n  addItem(e) {\n    // Prevent button click from submitting form\n    e.preventDefault();\n\n    // Create variables for our list, the item to add, and our form\n    let list = this.state.list;\n    const newItem = document.getElementById(\"addInput\");\n    const form = document.getElementById(\"addItemForm\");\n\n    // If our input has a value\n    if (newItem.value != \"\") {\n      // Add the new item to the end of our list array\n      list.push(newItem.value);\n      // Then we use that to set the state for list\n      this.setState({\n        list: list\n      });\n      // Finally, we need to reset the form\n      newItem.classList.remove(\"is-danger\");\n      form.reset();\n    } else {\n      // If the input doesn't have a value, make the border red since it's required\n      newItem.classList.add(\"is-danger\");\n    }\n  }\n\n  removeItem(item) {\n    // Put our list into an array\n    const list = this.state.list.slice();\n    // Check to see if item passed in matches item in array\n    list.some((el, i) => {\n      if (el === item) {\n        // If item matches, remove it from array\n        list.splice(i, 1);\n        return true;\n      }\n    });\n    // Set state to list\n    this.setState({\n      list: list\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"content\">\n        <div className=\"container\">\n          <section className=\"section\">\n            <List items={this.state.list} delete={this.removeItem} />\n          </section>\n          <hr />\n          <section className=\"section\">\n            <form className=\"form\" id=\"addItemForm\">\n              <input\n                type=\"text\"\n                className=\"input\"\n                id=\"addInput\"\n                placeholder=\"Something that needs ot be done...\"\n              />\n              <button className=\"button is-info\" onClick={this.addItem}>\n                Add Item\n              </button>\n            </form>\n          </section>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass List extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      filtered: []\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n      filtered: this.props.items\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      filtered: nextProps.items\n    });\n  }\n\n  handleChange(e) {\n    // Variable to hold the original version of the list\n    let currentList = [];\n    // Variable to hold the filtered list before putting into state\n    let newList = [];\n\n    // If the search bar isn't empty\n    if (e.target.value !== \"\") {\n      // Assign the original list to currentList\n      currentList = this.props.items;\n\n      // Use .filter() to determine which items should be displayed\n      // based on the search terms\n      newList = currentList.filter(item => {\n        // change current item to lowercase\n        const lc = item.toLowerCase();\n        // change search term to lowercase\n        const filter = e.target.value.toLowerCase();\n        // check to see if the current list item includes the search term\n        // If it does, it will be added to newList. Using lowercase eliminates\n        // issues with capitalization in search terms and search content\n        return lc.includes(filter);\n      });\n    } else {\n      // If the search bar is empty, set newList to original task list\n      newList = this.props.items;\n    }\n    // Set the filtered state based on what our rules added to newList\n    this.setState({\n      filtered: newList\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <input\n          type=\"text\"\n          className=\"input\"\n          onChange={this.handleChange}\n          placeholder=\"Search...\"\n        />\n        <ul>\n          {this.state.filtered.map(item => (\n            <li key={item}>\n              {item} &nbsp;\n              <span\n                className=\"delete\"\n                onClick={() => this.props.delete(item)}\n              />\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default List;\n"]},"metadata":{},"sourceType":"module"}